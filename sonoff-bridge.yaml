esphome:
  name: rf-bridge
  friendly_name: RF Bridge
  project: 
    name: Nguyên Hồ.RF Bridge
    version: v1.0.0 (Coding by Nguyenho) 
esp8266:
  board: esp01_1m
logger:
  baud_rate: 0
api:  
  services:
  # Send standard RF using integer values 
    - service: send_rf_code
      variables:
        sync: int
        low: int
        high: int
        code: int
      then:
        - rf_bridge.send_code:
            sync: !lambda 'return sync;'
            low: !lambda 'return low;'
            high: !lambda 'return high;'
            code: !lambda 'return code;'   
    - service: learn
      then:
        - rf_bridge.learn
rf_bridge:
  on_code_received:  # all firmwares, can be reported as integer, hex, or both, as desired.
    then:
      - text_sensor.template.publish:
          id: rf_code_sensor
          state: !lambda |-
            char buffer[100];
            sprintf(buffer, "esphome.rf_received | sync: %d low: %d high: %d code: %d",
                    data.sync,
                    data.low,
                    data.high,
                    data.code);
            return {buffer};

      - homeassistant.event:
          event: esphome.rf_received
          data_template:
            sync: !lambda 'return data.sync;'
            low: !lambda 'return data.low;'
            high: !lambda 'return data.high;'
            code: !lambda 'return data.code;'
      # Thêm beep báo hiệu
      - output.turn_on: buzzer
      - delay: 150ms
      - output.turn_off: buzzer
      - script.execute: reset_rf

  on_advanced_code_received:  # only on Portisch or mightymos firmwares
    then:
      - homeassistant.event:
          event: esphome.rf_advanced_received
          data_template:
            length: !lambda 'return to_string(data.length);'
            protocol: !lambda 'return to_string(data.protocol);'
            code: !lambda 'return data.code;'        
ota:
  - platform: esphome
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Rf-Bridge"
    password: "Nguyen@0208"
  use_address: 192.168.1.2 
captive_portal:
web_server:
  port: 80
script:
  - id: reset_rf
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          id(rf_code_sensor).publish_state("");  
  - id: reset_ir_display
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          id(ir_all_display).publish_state("");          
#IR Receiver
remote_receiver:
  - id: ir_receiver   
    pin:
      number: 12
      inverted: True
      mode:
        input: true
        pullup: true
    #rmt_symbols: 32
    # tolerance: 25%
    # filter: 50us
    # idle: 10ms
    # Sony
    dump: 
      - sony
      - rc_switch
    on_sony:
      then:
        - lambda:
            static unsigned long last_trigger_time = 0;
            unsigned long current_time = millis();

            if (current_time - last_trigger_time > 300) {
              last_trigger_time = current_time;
              id(remote_event_triggered) = true;
            } else {
              id(remote_event_triggered) = false;
            }
        - if:
            condition:
              lambda: 'return id(remote_event_triggered);'
            then:
              - homeassistant.event:
                  event: esphome.ir_receiver
                  data_template:
                    type: "Sony"
                    data: !lambda 'return x.data;'
                    nbits: !lambda 'return x.nbits;'       
              - text_sensor.template.publish:
                  id: ir_all_display
                  state: !lambda |-
                    char buffer[80];
                    sprintf(buffer, "esphome.ir_receiver: Sony | data: %u | nbits: %d", x.data, x.nbits);
                    return {buffer};
              - script.execute: reset_ir_display

    # RCSwitch
    on_rc_switch:
      then:        
        - homeassistant.event:
            event: esphome.ir_receiver
            data_template:
              type: "RC_Switch"
              code: !lambda 'return x.code;'
              protocol: !lambda 'return x.protocol;'
        - text_sensor.template.publish:
            id: ir_all_display
            state: !lambda |-
              unsigned long long code = x.code;
              if (code == 0) return std::string("");

              size_t bits = (size_t)floor(log2(code) + 1);
              char bit_string[bits + 1];
              for (size_t i = bits; i-- > 0; ) {
                bit_string[bits - 1 - i] = (code & (1ULL << i)) ? '1' : '0';
              }
              bit_string[bits] = '\0';

              return std::string("esphome.ir_receiver: RCSwitch | code: ") + bit_string;
        - script.execute: reset_ir_display
globals:
  - id: remote_event_triggered
    type: bool
    restore_value: no
    initial_value: 'false'
uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 19200
# Buzzer setup on GPIO 14
output:
  - platform: gpio
    id: buzzer
    pin: 14
status_led:
    pin:
      number: 13
      inverted: True 
switch:
  - platform: gpio
    pin: 5
    id: siren
    name: Báo động
    icon: mdi:alarm-light-outline    
    restore_mode: ALWAYS_OFF
button:
  - platform: restart
    icon: mdi:restart
    name: "Reboot"
    entity_category: "diagnostic"

  - platform: template
    name: "Buzzer"
    icon: mdi:bell-circle-outline
    on_press:
      - output.turn_on: buzzer
      - delay: 150ms
      - output.turn_off: buzzer 
      - delay: 250ms
      - output.turn_on: buzzer
      - delay: 150ms
      - output.turn_off: buzzer
  - platform: template
    name: Báo động
    icon: mdi:alarm-light-outline
    on_press: 
      - switch.turn_on: siren
      - delay: 180ms
      - switch.turn_off: siren
      - delay: 210ms
      - switch.turn_on: siren
      - delay: 180ms
      - switch.turn_off: siren

text_sensor:
  - platform: template
    name: "Servic RF"
    icon: mdi:room-service-outline
    lambda: |-
      return {"send_rf_code"};

  - platform: wifi_info
    ip_address:
      name: "IP"
      icon: mdi:ip-network-outline
      update_interval: 5min

  - platform: template
    name: "RF"
    id: rf_code_sensor
    icon: mdi:remote

  - platform: template
    name: "IR"
    id: ir_all_display
    icon: mdi:remote-tv
        
binary_sensor:
  - platform: status
    name: "Status"
    entity_category: "diagnostic"
